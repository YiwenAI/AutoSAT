{
  "0": {
    "time": 99.0,
    "prompt": "else if (lbd_queue_size == 50 && 0.8 * fast_lbd_sum / lbd_queue_size > slow_lbd_sum / conflicts) restart();"
  },
  "4": {
    "time": 90.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n}"
  },
  "5": {
    "time": 90.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if ((phase_rand -= 5) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) == 0 ? rand() % 2 ? 1 : -1 : value(i);\n}"
  },
  "6": {
    "time": 97.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if (conflicts >= 1000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n}"
  },
  "8": {
    "time": 94.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if (conflicts > 10000) restart();\n}"
  },
  "10": {
    "time": 97.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if (conflicts >= 1000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n}"
  },
  "12": {
    "time": 98.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if ((phase_rand -= 5) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) == 0 ? rand() % 2 ? 1 : -1 : value(i);\n    else if (conflicts >= 1000 && fast_lbd_sum / lbd_queue_size > 1.5 * slow_lbd_sum / conflicts) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n}"
  },
  "14": {
    "time": 92.5,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if ((phase_rand -= 5) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) == 0 ? rand() % 2 ? 1 : -1 : value(i);\n    else if (conflicts >= 1000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (fast_lbd_sum / lbd_queue_size > 1.5 * slow_lbd_sum / conflicts) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n}"
  },
  "17": {
    "time": 94.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if ((phase_rand -= 5) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) == 0 ? rand() % 2 ? 1 : -1 : value(i);\n    else if (conflicts >= 1000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (fast_lbd_sum / lbd_queue_size > 1.5 * slow_lbd_sum / conflicts) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (conflicts >= 10000 && learnt.size() >= 5000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n}"
  },
  "18": {
    "time": 94.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if ((phase_rand -= 5) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) == 0 ? rand() % 2 ? 1 : -1 : value(i);\n    else if (conflicts >= 1000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (fast_lbd_sum / lbd_queue_size > 1.5 * slow_lbd_sum / conflicts) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (conflicts >= 10000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n}"
  },
  "19": {
    "time": 88.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if ((phase_rand -= 5) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) == 0 ? rand() % 2 ? 1 : -1 : value(i);\n    else if (conflicts >= 1000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (fast_lbd_sum / lbd_queue_size > 1.5 * slow_lbd_sum / conflicts) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (conflicts >= 10000 && conflicts % 1000 == 0) {\n        conflicts = 0;\n        double avg_lbd = 0;\n        for (int i = 1; i <= origin_clauses; i++) {\n            avg_lbd += clause_DB[i].lbd;\n        }\n        avg_lbd /= origin_clauses;\n        if (avg_lbd > 5) {\n            for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n        }\n    }\n}"
  },
  "20": {
    "time": 88.0,
    "prompt": "void Solver::restart() {\n    fast_lbd_sum = lbd_queue_size = lbd_queue_pos = 0;\n    backtrack(0);\n    int phase_rand = rand() % 100;              // probabilistic rephasing\n    if ((phase_rand -= 60) < 0)     for (int i = 1; i <= vars; i++) saved[i] = local_best[i];\n    else if ((phase_rand -= 5) < 0) for (int i = 1; i <= vars; i++) saved[i] = -local_best[i];\n    else if ((phase_rand -= 20) < 0)for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    else if ((phase_rand -= 10) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) > 0 ? 1 : -1;\n    else if ((phase_rand -= 5) < 0)for (int i = 1; i <= vars; i++) saved[i] = value(i) == 0 ? rand() % 2 ? 1 : -1 : value(i);\n    else if (conflicts >= 1000) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (fast_lbd_sum / lbd_queue_size > 1.5 * slow_lbd_sum / conflicts) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n    else if (conflicts >= 10000 && slow_lbd_sum / conflicts > 10) {\n        conflicts = 0;\n        for (int i = 1; i <= vars; i++) saved[i] = rand() % 2 ? 1 : -1;\n    }\n}"
  }
}