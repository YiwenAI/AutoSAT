{"time": {"1": 232, "2": 256}, "prompt": {"1": "void Solver::bump_var(int var, double coeff) {\n    double new_activity = activity[var] + var_inc * coeff;\n    if (new_activity > 1e100) {           // Update score and prevent float overflow\n        for (int i = 1; i <= vars; i++) {\n            activity[i] *= 1e-100;\n        }\n        var_inc *= 1e-100;\n    }\n    activity[var] = new_activity; // Update the activity of the variable\n    if (vsids.inHeap(var)) {\n        vsids.update(var);                 // update heap\n    }\n}", "2": "void Solver::bump_var(int var, double coeff) {\n    if ((activity[var] += var_inc * coeff) > 1e100) {           // Update score and prevent float overflow\n        for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n        var_inc *= 1e-100;\n    }\n    if (vsids.inHeap(var)) vsids.update(var);                 // update heap\n\n    // Additional improvement: Increase the activity of related variables\n    for (int i = 0; i < clause_DB.size(); i++) {\n        Clause& c = clause_DB[i];\n        for (int j = 0; j < c.lit.size(); j++) {\n            int lit = c[j];\n            int related_var = abs(lit);\n            if (related_var != var) {\n                activity[related_var] += var_inc * coeff * 0.5;  // Increase activity of related variables\n                if (activity[related_var] > 1e100) {\n                    for (int k = 1; k <= vars; k++) activity[k] *= 1e-100;\n                    var_inc *= 1e-100;\n                }\n                if (vsids.inHeap(related_var)) vsids.update(related_var);  // Update heap for related variables\n            }\n        }\n    }\n}"}, "PAR-2": {"1": 462, "2": 480}, "satisfiable": {"1": 2, "2": 0}, "unsatisfiable": {"1": 0, "2": 0}, "timeout": {"1": 46, "2": 48}}