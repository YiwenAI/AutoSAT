{
  "0": {
    "time": 16424,
    "prompt": " "
  },
  "1": {
    "time": 18363,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    activity[var] += var_inc * coeff; // Increase the activity of the variable\n    if (activity[var] > 1e100) {     // Check for overflow\n        // Rescale all activities if overflow is imminent\n        for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n        var_inc *= 1e-100; // Adjust the increment as well\n    }\n    // Use a more aggressive strategy by increasing the increment factor\n    var_inc *= (1 / 0.95); // You can adjust this value as needed\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n}"
  },
  "2": {
    "time": 15534,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    // Check if adding the increment would cause an overflow\n    if (activity[var] > 1e100 - increment) {\n        // Scale down all activities to prevent overflow\n        for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n        var_inc *= 1e-100; // Adjust var_inc accordingly\n    }\n    activity[var] += increment; // Safely add the increment now\n    if (vsids.inHeap(var)) vsids.update(var); // Update the variable in the heap\n}"
  },
  "4": {
    "time": 17191,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    if (var >= 1 && var <= vars) { // Ensure the variable index is within the valid range\n        activity[var] += var_inc * coeff;\n        if (activity[var] > 1e100) { // Rescale the activities to prevent overflow\n            for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n            var_inc *= 1e-100; // Adjust var_inc accordingly\n        } else if (activity[var] < 1e-100) { // Rescale to prevent underflow\n            for (int i = 1; i <= vars; i++) activity[i] *= 1e100;\n            var_inc *= 1e100; // Adjust var_inc accordingly\n        }\n        if (vsids.inHeap(var)) vsids.update(var); // Update the variable in the heap\n    }\n}"
  },
  "5": {
    "time": 17425,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    // Check if adding the increment would cause an overflow\n    if (activity[var] + increment > 1e100) {\n        // Scale down all activities to prevent overflow\n        double rescale_factor = 1e-100;\n        for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n        var_inc *= rescale_factor; // Adjust var_inc accordingly\n    } else {\n        activity[var] += increment; // Safely add the increment now\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n\n    // Dynamically adjust the increment value based on the variable's activity\n    // This can help to escape from local optima by giving a boost to variables that are not currently active\n    if (activity[var] < 1e-20) {\n        var_inc *= 1.05; // Slightly increase the increment if the activity is too low\n    }\n}"
  },
  "6": {
    "time": 15548,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    // Check if adding the increment would cause an overflow\n    if (activity[var] + increment > 1e150) { // Increased threshold to reduce frequency of rescaling\n        // Scale down all activities to prevent overflow\n        double rescale_factor = 1e-150;\n        for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n        var_inc *= rescale_factor; // Adjust var_inc accordingly\n    }\n    activity[var] += increment; // Safely add the increment now\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n}"
  },
  "8": {
    "time": 17541,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    static const int check_interval = 1000; // Interval for overflow checks\n    static int check_counter = check_interval; // Counter for overflow checks\n\n    // Increase the activity of the variable\n    activity[var] += var_inc * coeff;\n\n    // Only check for overflow every 'check_interval' invocations\n    if (--check_counter == 0) {\n        check_counter = check_interval;\n        // Check for overflow\n        if (activity[var] > 1e100) {\n            // Scale down all activities to prevent overflow\n            for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n            var_inc *= 1e-100; // Adjust var_inc accordingly\n        }\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n}"
  },
  "11": {
    "time": 16763,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    bool activity_increased = false;\n\n    // Check if adding the increment would cause an overflow\n    if (activity[var] + increment > 1e150) { // Increased threshold to reduce frequency of rescaling\n        // Calculate the average activity to determine a dynamic rescale factor\n        double avg_activity = 0;\n        for (int i = 1; i <= vars; i++) avg_activity += activity[i];\n        avg_activity /= vars;\n\n        double rescale_factor = avg_activity > 1e75 ? 1e-75 : 1e-150;\n        for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n        var_inc *= rescale_factor; // Adjust var_inc accordingly\n        activity_increased = true;\n    }\n\n    // Only update the activity and the heap if the activity was actually increased\n    if (!activity_increased) {\n        activity[var] += increment; // Safely add the increment now\n        if (vsids.inHeap(var)) vsids.update(var);\n    } else if (vsids.inHeap(var)) {\n        vsids.update(var);\n    }\n\n    // More aggressive increment for variables with low activity\n    if (activity[var] < 1e-20) {\n        var_inc *= 2; // Double the increment if the activity is too low\n    }\n}"
  },
  "9": {
    "time": 21954,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    // Avoid checking for overflow when the increment is small\n    if (increment < 1e100) {\n        activity[var] += increment;\n    } else {\n        // Check if adding the increment would cause an overflow\n        if (activity[var] + increment > 1e300) { // Use a larger threshold to reduce rescaling frequency\n            // Scale down all activities to prevent overflow\n            double rescale_factor = 1e-300;\n            for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n            var_inc *= rescale_factor; // Adjust var_inc accordingly\n        } else {\n            activity[var] += increment; // Safely add the increment now\n        }\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n\n    // Apply a decay to the increment to reduce its impact over time\n    var_inc *= 0.995;\n}"
  },
  "13": {
    "time": 19082,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    activity[var] += increment;\n\n    // Check if the activity goes beyond the threshold and rescale if needed\n    if (activity[var] > 1e100) {\n        // Instead of calculating the average, we use a fixed rescale factor\n        // This avoids the overhead of looping through all variables every time we rescale\n        double rescale_factor = 1e-100;\n        for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n        var_inc *= rescale_factor;\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n\n    // Apply a less aggressive decay to the increment to maintain its impact over time\n    // This is a compromise between too frequent decay and too aggressive increment\n    var_inc *= 0.999;\n}"
  },
  "14": {
    "time": 18894,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n\n    // Check if adding the increment would cause an overflow\n    if (activity[var] + increment > 1e100) {\n        // Rescale all activities by a smaller factor to avoid frequent rescaling\n        double rescale_factor = 1e-100;\n        for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n        var_inc *= rescale_factor;\n    } else {\n        activity[var] += increment;\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n\n    // Apply a slight decay to the increment to ensure diversity over time\n    var_inc *= 0.999;\n}"
  },
  "16": {
    "time": 19061,
    "prompt": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    activity[var] += increment;\n\n    // If the activity goes beyond a certain threshold, rescale all activities\n    if (activity[var] > 1e100) {\n        double rescale_factor = 1e-100;\n        for (int i = 1; i <= vars; i++) {\n            activity[i] *= rescale_factor;\n        }\n        var_inc *= rescale_factor;\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) {\n        vsids.update(var);\n    }\n\n    // Apply a decay to the increment to reduce its impact over time\n    // This decay is less aggressive than the previous experiment to avoid diminishing the importance of recently conflicted variables too quickly\n    var_inc *= 0.999;\n}"
  }
}