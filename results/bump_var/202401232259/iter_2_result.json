{"time": {"11": 16763, "9": 21954}, "prompt": {"11": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    bool activity_increased = false;\n\n    // Check if adding the increment would cause an overflow\n    if (activity[var] + increment > 1e150) { // Increased threshold to reduce frequency of rescaling\n        // Calculate the average activity to determine a dynamic rescale factor\n        double avg_activity = 0;\n        for (int i = 1; i <= vars; i++) avg_activity += activity[i];\n        avg_activity /= vars;\n\n        double rescale_factor = avg_activity > 1e75 ? 1e-75 : 1e-150;\n        for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n        var_inc *= rescale_factor; // Adjust var_inc accordingly\n        activity_increased = true;\n    }\n\n    // Only update the activity and the heap if the activity was actually increased\n    if (!activity_increased) {\n        activity[var] += increment; // Safely add the increment now\n        if (vsids.inHeap(var)) vsids.update(var);\n    } else if (vsids.inHeap(var)) {\n        vsids.update(var);\n    }\n\n    // More aggressive increment for variables with low activity\n    if (activity[var] < 1e-20) {\n        var_inc *= 2; // Double the increment if the activity is too low\n    }\n}", "9": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    // Avoid checking for overflow when the increment is small\n    if (increment < 1e100) {\n        activity[var] += increment;\n    } else {\n        // Check if adding the increment would cause an overflow\n        if (activity[var] + increment > 1e300) { // Use a larger threshold to reduce rescaling frequency\n            // Scale down all activities to prevent overflow\n            double rescale_factor = 1e-300;\n            for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n            var_inc *= rescale_factor; // Adjust var_inc accordingly\n        } else {\n            activity[var] += increment; // Safely add the increment now\n        }\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n\n    // Apply a decay to the increment to reduce its impact over time\n    var_inc *= 0.995;\n}"}}