{
  "time": {
    "1": 13271,
    "2": 13333,
    "3": 13132,
    "4": 11988
  },
  "prompt": {
    "1": "void Solver::bump_var(int var, double coeff) {\n    double new_activity = activity[var] + var_inc * coeff;\n    if (new_activity > 1e100) { // Rescale to prevent overflow\n        double rescale_factor = 1e-100;\n        for (int i = 1; i <= vars; i++) activity[i] *= rescale_factor;\n        var_inc *= rescale_factor;\n    } else {\n        activity[var] = new_activity;\n    }\n    if (vsids.inHeap(var)) vsids.update(var); // Update the variable in the heap\n}",
    "2": "void Solver::bump_var(int var, double coeff) {\n    activity[var] += var_inc * coeff; // Increase the activity of the variable\n    if (activity[var] > 1e100) {     // Rescale to prevent overflow\n        for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n        var_inc *= 1e-100;           // Adjust the increment as well\n    }\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n}",
    "3": "void Solver::bump_var(int var, double coeff) {\n    double new_activity = activity[var] + var_inc * coeff;\n    if (new_activity > 1e100) { // Rescale to prevent overflow\n        for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n        var_inc *= 1e-100;\n        new_activity *= 1e-100; // Ensure the updated activity is also scaled down\n    }\n    activity[var] = new_activity;\n    if (vsids.inHeap(var)) vsids.update(var); // Update the variable in the heap\n}",
    "4": "void Solver::bump_var(int var, double coeff) {\n    activity[var] += var_inc * coeff; // Increase the activity of the variable by the increment times the coefficient.\n    if (activity[var] > 1e100) { // Check if we need to rescale to prevent floating-point overflow.\n        for (int i = 1; i <= vars; i++) {\n            activity[i] *= 1e-100; // Scale down all activities to keep numbers manageable.\n        }\n        var_inc *= 1e-100; // Scale down the increment as well.\n    }\n    // Instead of checking if the variable is in the heap every time, we can assume that it should be there if it's active.\n    // This is because the only time a variable is not in the heap is initially or when it has been assigned a value.\n    // Therefore, we can check if the variable is unassigned and update the heap accordingly.\n    if (value[var] == 0) {\n        vsids.update(var); // Update the variable's position in the heap.\n    }\n}"
  }
}