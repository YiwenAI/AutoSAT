{
  "time": {
    "1": 2162.25,
    "3": 986.0,
    "4": 918.0
  },
  "prompt": {
    "1": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    activity[var] += increment;\n    \n    // If the activity goes out of bounds, rescale all activities and the increment.\n    if (activity[var] > 1e100) {\n        for (int i = 1; i <= vars; i++)\n            activity[i] *= 1e-100;\n        var_inc *= 1e-100;\n    }\n    \n    // Apply some aging to the variable activity to promote diversity.\n    for (int i = 1; i <= vars; i++)\n        activity[i] *= 0.95;\n\n    // Decay the increment to avoid variables getting stuck with high activity.\n    var_inc *= 0.99;\n    \n    // If the variable is in the heap, update its position.\n    if (vsids.inHeap(var))\n        vsids.update(var);\n}",
    "3": "void Solver::bump_var(int var, double coeff) {\n    double increment = var_inc * coeff;\n    activity[var] += increment;\n    if (activity[var] > 1e100) { // Rescale to prevent overflow\n        for (int i = 1; i <= vars; i++) activity[i] *= 1e-100;\n        var_inc *= 1e-100;\n    } else if (activity[var] < 1e-100) { // Boost variable activity if it's too low\n        activity[var] += increment * 1e100;\n    }\n    // Update the variable's position in the heap if it's there\n    if (vsids.inHeap(var)) vsids.update(var);\n}",
    "4": "void Solver::bump_var(int var, double coeff) {\n    const double multiplier = 1.5;\n    const double max_activity = 1e100;\n    const double rescale_factor = 1e-100;\n\n    // Increase activity by a scaled factor\n    activity[var] += var_inc * coeff * multiplier;\n\n    // If activity exceeds the maximum, rescale all activities\n    if (activity[var] > max_activity) {\n        for (int i = 1; i <= vars; i++) {\n            activity[i] *= rescale_factor;\n        }\n        var_inc *= rescale_factor; // Rescale the increment as well\n    }\n\n    // Update the variable in the heap if it's there\n    if (vsids.inHeap(var)) {\n        vsids.update(var);\n    }\n}"
  }
}